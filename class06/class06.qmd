---
title: "Class 06: R Functions"
author: "Cynthia Lin"
format: gfm
---

## R Functions

In this class we will work through the process of developing our own function for claculating average grades for fictional students in a fictional class. 

We will start with a simplified version of the problem. Grade some vectors of student scores. We want to drop the lowest score and get the average.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We can use the `mean()` function to get the average:

```{r}
mean(student1)
```

We can find the smallest value with the `min()` function

```{r}
min(student1)
```
There is also the `which.min()` function. Let's see if this can help:
```{r}
student1
```
```{r}
which.min(student1)
```

```{r}
student1[which.min(student1)]
```

```{r}
x <- 1:5
x
```
```{r}
x[-4]
```

Let;s put this together to drop of the lowest value and find the average.
```{r}
mean(student1[-(which.min(student1))])
```

```{r}
student2
```

```{r}
mean(student2[-which.min(student2)])
```

```{r}
which.min(student2)
```
```{r}
student2[-which.min(student2)]
```

```{r}
 mean(student2[-which.min(student2)])
```
```{r}
mean(c(5,5,5,NA))
```

```{r}
mean(c(5,5,5,NA), na.rm=TRUE)
```
Can I use this `na.rm=TRUE` argument to help here?
```{r}
mean(student2[-which.min(student2)], na.rm=TRUE)
```
Hmm.. what about student 3?
```{r}
student3
```

```{r}
mean(student3, na.rm=TRUE)
```

So this sucks! It inflates grades as it drop all the NAs before determining the mean...

How does function `is.na()` how does it work?

```{r}
student3
is.na(student3)
```
```{r}
student2
is.na(student2)
```
I can use a logical vector to index another vector.
```{r}
x <- 1:5 
x[x> 3] 
```
```{r}
student2[is.na(student2)] <- 0
student2
```
```{r}
x <- student3
is.na(x)
```
```{r}
x[is.na(x)]<- 0
x
```
```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```
We have our working snippet of code! This is now going to be the body of our function. 

All function in R have at least 3 things:

- A name (we pick that)
- input arguments
- body (the code that does the work)

```{r}
grade <- function(x) {
  #mask NA to zero
  x[is.na(x)] <- 0
  # drop the lowest value and get mean
  mean( x[-which.min(x)]) }
```

Let's try it out
```{r}
 grade(student1)
```


> Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” 

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names=1)
head(gradebook)
View(gradebook)
```


I can use the super useful but a bit more complicated `apply()` function to use our existing `grade()` function on the whole class gradebook. It applies the code to all students.

How does this apply() function work?

```{r}
results <- apply(gradebook, 1, grade) 
```
>Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
which.max(results)
```


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? 

```{r}
which.min(apply(gradebook, 2, sum, na.rm=TRUE))
```
```{r}
# not a good way 
which.min(apply(gradebook, 2, mean, na.rm=TRUE))
```

If I want to use the mean approach I will need to mask the NA (missing homeworks) to zero first:
```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask
```

```{r}
which.min(apply(mask,2,mean, na.rm=TRUE))
```

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

Here we are going to look at the correlation of each homework results (i.e. the columns in the gradebook) with the overall grade of students from the course. 



```{r}
mask$hw4
```
I am going to use the `cor()` function:
```{r}
cor(results, mask$hw4)
```
```{r}
cor(results, mask$hw5)
```
 
```{r}
apply(mask, 2, cor , y = results)
```









